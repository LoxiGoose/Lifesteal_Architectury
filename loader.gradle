apply plugin: 'com.github.johnrengelman.shadow'

evaluationDependsOn(':common')

def loomPlatform = project.property('loom.platform')
def projectName
if(loomPlatform == 'neoforge')
    projectName = 'NeoForge'
else
    projectName = 'Fabric'

def generatedResources = file("src/generated/resources")

sourceSets.main.resources.srcDirs = [ 'src/main/resources', {
    project(':neoforge').file('src/generated/resources').absolutePath
}
]

loom {
    accessWidenerPath.set(project(":common").loom.accessWidenerPath)
    if(loomPlatform == 'neoforge'){
        runs {
            data {
                data()
                programArgs "--all", "--mod", "${mod_id}"
                programArgs "--output", generatedResources.absolutePath
            }
            client {
                programArgs "--username", "DevGoose###"
            }
        }

        mods {
            forge {
                sourceSet project(":neoforge").sourceSets.main
            }
        }
    }
}

def resourceTargets = ['fabric.mod.json', 'neoforge.mods.toml']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id                 : mod_id, mod_name: mod_name, mod_version: mod_version,
                         mod_authors            : mod_authors, mod_credits:mod_credits, mod_description: mod_description,
                         display_url            :display_url, logo_file:logo_file,
                         issue_tracker_url      : issue_tracker_url,
                         update_json_url        : update_json_url,
                         mod_license            : mod_license,
                         minecraft_version_range: minecraft_version_range,
                         minecraft_version      : minecraft_version, fabric_loader_version: fabric_loader_version,
                         fabric_api_version     : fabric_api_version, repository_url: repository_url,
                         neo_version_range: neo_version_range, neo_version: neo_version, neo_loader_version_range: neo_loader_version_range
                            ]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }

}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    create("development${projectName}") {
        extendsFrom common
    }
}

architectury {
    platformSetupLoomIde()

    if(loomPlatform == 'fabric') fabric()
    else if (loomPlatform == 'neoforge') neoForge()
}

dependencies {
    implementation project(path: ':common')
    if(loomPlatform == 'fabric') {
        modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
        modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}+${minecraft_version}"

        implementation 'com.electronwill.night-config:core:3.6.3'
        implementation 'com.electronwill.night-config:toml:3.6.3'

        modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forge_config_api_port_version}"
        include "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forge_config_api_port_version}"

        // Adds a dependency on the base cardinal components module (required by every other module)
        // Replace modImplementation with modApi if you expose components in your own API
        modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cardinal_components_api_version}"
        modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cardinal_components_api_version}"
        // Includes Cardinal Components API as a Jar-in-Jar dependency (optional)
        include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cardinal_components_api_version}"
        include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cardinal_components_api_version}"
    } else if(loomPlatform == 'neoforge'){
        neoForge "net.neoforged:neoforge:${neo_version}"
    }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':common', configuration: "transformProduction${projectName}")) { transitive false }
}

shadowJar {
    exclude 'architectury.common.json'

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    if(loomPlatform == 'fabric') {
        injectAccessWidener = true
    }

    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = 'dev'
}

sourcesJar {
    def commonSources = project(':common').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

idea.module {
    excludeDirs += [
            file('.gradle'),
            file('build'),
            file('run')
    ]
}